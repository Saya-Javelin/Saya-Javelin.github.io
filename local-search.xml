<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>初赛错题</title>
    <link href="undefined2019/10/07/preliminaries-chu-sai/"/>
    <url>2019/10/07/preliminaries-chu-sai/</url>
    
    <content type="html"><![CDATA[<p>一小部分错掉的初赛题。</p><a id="more"></a><hr><h4 id="left-NOIP2004-right-由-3-个-a-5-个-b-和-2-个-c-构成的所有字符串中-包含子串”-abc-”的共有几个？"><a href="#left-NOIP2004-right-由-3-个-a-5-个-b-和-2-个-c-构成的所有字符串中-包含子串”-abc-”的共有几个？" class="headerlink" title="$\left(NOIP2004\right)$ 由$3$个$a$,$5$个$b$和$2$个$c$构成的所有字符串中,包含子串”$abc$”的共有几个？"></a>$\left(NOIP2004\right)$ 由$3$个$a$,$5$个$b$和$2$个$c$构成的所有字符串中,包含子串”$abc$”的共有几个？</h4><p>去掉$abc$三个字母各一个后，分别还有$2$个、$4$个和$1$个。再把”$abc$”看成一个元素，共$\dfrac{(2+4+1+1)!}{2!\times 4!\times 1!\times 1!}=840$种排列。但会因子串重复了两个而导致多算，比如”${\color{green}{abc}}\ bb\ {\color{red}{abc}}\ ab$”和”${\color{red}{abc}}\ bb\ {\color{green}{abc}}\ ab$”(红色是我们自己用取出的造的子串，绿色是剩下字母的全排列中附带的子串)，所以含两个该子串的字符串被多算了一遍，需要减去。同理我们再去掉$abc$各一个，分别还有$1$个、$3$个、$0$个，以及两个”$abc$”所以含两个子串的排列数为$\dfrac{(1+3+2)!}{1!\times 3!\times 2!}\times =60$种。所以最终答案就是两数相减$840-60=720$种。</p>]]></content>
    
    
    <categories>
      
      <category>OI初赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>初赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模板解析</title>
    <link href="undefined2019/10/02/templates/"/>
    <url>2019/10/02/templates/</url>
    
    <content type="html"><![CDATA[<h1 id="天坑注意"><a href="#天坑注意" class="headerlink" title="天坑注意"></a>天坑注意</h1><h5 id="想说的"><a href="#想说的" class="headerlink" title="想说的"></a>想说的</h5><p>开个文章写写学过的模板。若有不严谨之处烦劳指出。<del>毕竟咱只是个不学无术还超爱颓的萌新…</del></p><a id="more"></a><h3 id="1-快速排序"><a href="#1-快速排序" class="headerlink" title="1. 快速排序"></a>1. 快速排序</h3><p>​ 在最劣$O(n^2)$，平均$O(n\log n)$的时间复杂度与$O(n\log n)$的空间复杂度下对数列进行排序。</p><p>​ 在一串数列中任意选取一个<strong>基准数</strong>，每次扫描将数列中大于基准数的元素置于基准数右侧，小于基准数的置于基准数左侧。然后对基准数两侧区间进行上述相同操作。思想基于分治，考察的是对数组与分治的理解。如图-1.1。</p><p><img src="/img/loading.gif" data-original="/img/posts/2/1.gif" alt></p><script type="math/tex;mode=display">\small{\text{图-1.1}}</script><p>​ 可以看出时间复杂度与所选基准数有关。如果每次基准数都选择最左侧的元素，那么，只要整个数列是单调的，就会导致每次扫描都会把剩下的元素全部放在这个基准数的一侧，导致时间复杂度退化为$O(n^2)$。如图-1.2。</p><p><img src="/img/loading.gif" data-original="/img/posts/2/2.gif" alt></p><script type="math/tex;mode=display">\small{\text{图-1.2}}</script><p>​ 代码实现有很多种，有从左侧每次扫描到一个元素就和另一侧较大的数交换的，也有两边同时向中间扫的。至于初赛？emmm…</p><p><del>远古</del>早期个人代码:</p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int a[1000001];int n;void qs (int l, int r) {    int i, j, mid;    i=l, j=r;    mid=a[(l+r)&gt;&gt;1];    do {        while (a[i]&lt;mid) i++;        while (a[j]&gt;mid) j--;        if (i&lt;=j) {            swap (a[i], a[j]);            i++, j--;        }    } while (i&lt;=j);    if (l&lt;j) qs (l, j);    if (i&lt;r) qs (i, r);}int main (void) {    scanf (&quot;%d&quot;, &amp;n);    for (int i=1; i&lt;=n; ++i) scanf (&quot;%d&quot;, &amp;a[i]);    qs (1, n);    for (int i=1; i&lt;=n; ++i) printf (&quot;%d &quot;, a[i]);    puts (&quot;&quot;);    return 0 ;}</code></pre>]]></content>
    
    
    <categories>
      
      <category>OI复赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一坨计划</title>
    <link href="undefined2019/09/02/lists/"/>
    <url>2019/09/02/lists/</url>
    
    <content type="html"><![CDATA[<p>一大堆计划，真的要死人的说…</p><a id="more"></a><h4 id="文化"><a href="#文化" class="headerlink" title="文化"></a>文化</h4><h4 id="OI"><a href="#OI" class="headerlink" title="OI"></a>OI</h4>]]></content>
    
    
    
    <tags>
      
      <tag>计划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="undefined2019/08/23/test/"/>
    <url>2019/08/23/test/</url>
    
    <content type="html"><![CDATA[<p>啦啦啦啦啦啦啦啦啦啦</p><a id="more"></a><p>$a^2$</p><pre><code class="lang-cpp">#include &lt;cstdio&gt;using namespace std;int main () {    int a, b;    scanf (&quot;%d%d&quot;, &amp;a, &amp;b);    printf (&quot;%d\n&quot;, a+b);    return 0;}</code></pre><h2 id="big"><a href="#big" class="headerlink" title="big"></a>big</h2><p><em>sb</em></p><script type="math/tex;mode=display">\begin{array}{c}{\because \frac{(12 x-3) x}{(1-3 x)^{2}(1+x)(1-x)}=\frac{A x}{(1-3 x)^{2}}+\frac{B x}{1+x}+\frac{C x}{1-x}+\frac{D x}{1-3 x}} \\ {\therefore \lim _{x \rightarrow \infty}(x f(x))=0} \\ {\therefore \lim _{x \rightarrow \infty}\left(B-C-\frac{1}{3} D\right)=0} \\ {\therefore D=3 \times(B-C)=-\frac{153}{32}}\end{array}</script>]]></content>
    
    
    
    <tags>
      
      <tag>文章测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>