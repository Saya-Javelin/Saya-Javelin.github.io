<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>NOIp2017-逛公园</title>
    <link href="undefined2019/11/07/solutions/NOIp2017_Day1T3_Park/"/>
    <url>2019/11/07/solutions/NOIp2017_Day1T3_Park/</url>
    
    <content type="html"><![CDATA[<h3 id="NOIp-Day1-T3-逛公园"><a href="#NOIp-Day1-T3-逛公园" class="headerlink" title="NOIp Day1 T3 逛公园"></a>NOIp Day1 T3 逛公园</h3><p>调了两天，自闭了</p><a id="more"></a><pre><code class="lang-cpp">/*/Saya-Javelin/*/#include &lt;cstring&gt;#include &lt;cstdio&gt;#include &lt;queue&gt;#define iln inline#define rgt register#define int long longusing std::memset;using std::priority_queue;const int S=1000000;char RRR[S];char *SSR, *UR;iln char fgc () {    if (SSR==UR) UR=(SSR=RRR)+fread (RRR, 1, S, stdin);    return SSR==UR ? EOF : *SSR++;}#define gc rrr=fgc()//#define gc rrr=getchar()iln int read (int &amp;ur) {    int ssr=1; char rrr; ur=0;    while (gc, rrr&gt;&#39;9&#39; || rrr&lt;&#39;0&#39;)    if (rrr==&#39;-&#39;) ssr=-1;    while (rrr&gt;=&#39;0&#39; &amp;&amp; rrr&lt;=&#39;9&#39;)    ur=ur*10+rrr-&#39;0&#39;, gc;    return ur=ur*ssr;}#undef gciln void write (int ur) {    if (ur&lt;0) putchar (&#39;-&#39;), ur*=-1;    if (ur&gt;=10) write (ur/10);    putchar (ur%10+&#39;0&#39;);}iln void wtn (int ur) {    write (ur), putchar (&#39;\n&#39;);}iln void wts (int ur) {    write (ur), putchar (&#39; &#39;);}//以上我奇怪的头文件&amp;快读 const int MAX=100005, INF=0x7ffffffffffll;int T;int n, m, K, P;int headt[MAX], kt=0, headf[MAX], kf=0;int u, v, w;int dis[MAX], f[55][MAX];bool insta[55][MAX];int ans=0;struct edge {    int t, ne, v;} et[MAX&lt;&lt;1], ef[MAX&lt;&lt;1];struct info {    int id, dis;    iln bool operator &lt; (const info &amp;that) const {        return this-&gt;dis &gt; that.dis;    }};iln void add (int i, int j, int van, edge *e, int *head, int &amp;cnt) {//传入指针大概方便些? 指针并不大会用...     e[++cnt]= (edge) {j, head[i], van};    head[i]=cnt;}priority_queue &lt;info&gt; q;iln void SPFA (int start, edge *e, int *head) {//你以为是SPFA? 其实是我dio(划)dijkstra哒!     dis[start]=0, q.push((info){start, 0});     while (!q.empty()) {        info now=q.top(); q.pop();        if (now.dis!=dis[now.id]) continue;        for (rgt int i=head[now.id], to=e[i].t; i; i=e[i].ne, to=e[i].t)              if (dis[to]&gt;dis[now.id]+e[i].v) {                dis[to]=dis[now.id]+e[i].v;                q.push ((info) {to, dis[to]});            }    }}iln int dfs (int now, int nowk, edge *e, int *head) {    //now表示当前位置    //nowk表示当前路径还能再比最短路径长多少    //(也就是接下去还能再把当前路径长度增加多少, 且仍符合条件)     //e和head决定跑反图还是原图    //似乎跑反图快些? 但跑的快不一定赢(划) 跑原图也能跑过去    if (nowk&gt;K) return 0;    //此时的k不符合条件, 直接返回掉     //(nowk不会小于0, 要不然最短路就是萎的;)    //(nowk如果此时大于K了, 接下去必然仍大于K, 要不然最短路就又是萎的)    if (insta[nowk][now]) return insta[nowk][now]=0, -1;    //相同的now和nowk又跑了一次, 说明有0环     if (f[nowk][now]!=-1) return f[nowk][now];    //记忆化, 这个点跑过且长度相同的就直接return     insta[nowk][now]=1;    rgt int tmp=0;    for (rgt int i=head[now]; i; i=e[i].ne) {        rgt int to=e[i].t, totmp, nowdis=dis[to]+e[i].v-dis[now];        //to是这条边连向的点, totmp表示连出去的点的方案数(那个点的答案)        //nowdis表示走这条边和最短路长度相差多少         if (nowdis&gt;=0 &amp;&amp; nowdis&lt;=nowk) {//如果走这条边合法             totmp= dfs (to, nowk-nowdis, e, head);//获取答案             if (totmp==-1) return insta[nowk][now]=0, f[nowk][now]=-1;//有0环, 退出             (tmp+=totmp)%=P;//累加         }    }    insta[nowk][now]=0;    if (now==n &amp;&amp; !nowk) tmp=1;    //如果nowk为0且此时在终点, 说明此时跑的是最短路径, 这个答案是最开始的答案, 所以把它初始化为 1     return f[nowk][now]=tmp;//记忆化 }signed main (void) {    read (T);    START: while (T--) {        kt=kf=ans=0;//多组数据不清空, 满屏爆蛋见祖宗         read (n), read (m), read (K), read (P);        for (rgt int i=0; i&lt;=n; ++i) {//一坨memset有点长, 手写短些 (但慢了好多?              headt[i]=headf[i]=0, dis[i]=INF;            for (rgt int j=0; j&lt;=K; ++j) f[j][i]=-1;        }        for (rgt int i=1; i&lt;=m; ++i) {            read (u), read (v), read (w);            add (u, v, w, et, headt, kt), add (v, u, w, ef, headf, kf);//原图和反图         }        SPFA (n, ef, headf);        //因为我要求的是每个点到终点的距离, 又因为是有向图, 所以得跑反图, 这个不理解可以手膜        //(我一开始连这个都没懂...这人真的菜)         for (rgt int i=0; i&lt;=K; ++i) {//从0开始, 也就是从最短路开始初始化             rgt int tmp=dfs (1, i, et, headt);            if (tmp==-1) { puts (&quot;-1&quot;); goto START; }//有0环，终止交易 (?)             else (ans+=tmp)%=P;//所有方案和         }        wtn (ans);    }    return 0;}//询问一个图中与最短路长度相差不超过K的路径条数//显然有0环就有无数条//记搜就行了//为啥这么详细 ?因为我菜//写了两天, 或者说对着题解抄了两天 //凎, csp岂不是要挂</code></pre>]]></content>
    
    
    <categories>
      
      <category>OI复赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>NOIp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初赛错题</title>
    <link href="undefined2019/10/07/preliminaries-chu-sai/"/>
    <url>2019/10/07/preliminaries-chu-sai/</url>
    
    <content type="html"><![CDATA[<p>一小部分错掉的初赛题。</p><a id="more"></a><hr><h4 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h4><p>由$3$个$a$,$5$个$b$和$2$个$c$构成的所有字符串中,包含子串”$abc$”的共有几个？</p><p>去掉$abc$三个字母各一个后，分别还有$2$个、$4$个和$1$个。再把”$abc$”看成一个元素，共$\dfrac{(2+4+1+1)!}{2!\times 4!\times 1!\times 1!}=840$种排列。但会因子串重复了两个而导致多算，比如”${\color{green}{abc}}\ bb\ {\color{red}{abc}}\ ab$”和”${\color{red}{abc}}\ bb\ {\color{green}{abc}}\ ab$”(红色是我们自己用取出的造的子串，绿色是剩下字母的全排列中附带的子串)，所以含两个该子串的字符串被多算了一遍，需要减去。同理我们再去掉$abc$各一个，分别还有$1$个、$3$个、$0$个，以及两个”$abc$”所以含两个子串的排列数为$\dfrac{(1+3+2)!}{1!\times 3!\times 2!}\times =60$种。所以最终答案就是两数相减$840-60=720$种。</p><h4 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h4><p>在 $1$ 和 $2015$ 之间（包括 $1$ 和 $2015$ 在内）不能被 $4$、$5$、$6$ 三个数任意一个数整除的数有$____$个。</p><p>容斥搞搞就好了，别像我一样$shabby$地把被$4$、$6$整除的数用$24$去算，整除请用$lcm$。</p><h4 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h4><p>本题中，我们约定布尔表达式只能包含 $p$, $q$, $r$ 三个布尔变量，以及“与”（$∧$）、“或”（$∨$）、“非”（$¬$）三种布尔运算。如果无论 $p$, $q$, $r$ 如何取值，两个布尔表达式的值总是相同，则称它们等价。例如，$(p∨q)∨r$ 和 $p∨(q∨r)$等价，$p∨¬p$ 和 $q∨¬q$ 也等价；而 $p∨q$ 和 $p∧q$ 不等价。那么，两两不等价的布尔表达式最多有$____$个。</p><p>题意：请问，由三个不同布尔变量和“与”“或”“非”三种布尔运算组成的布尔表达式中，两两之间值可能不相同的最多几个？</p><p>再简化：请问由三个布尔变量与这三个运算符组成的式子的值各有几个？</p><p>最后：由于三个变量只可能有$2^3$也就是$8$种可能的取值。每种取值与另一变量的取值两两搭配，共$2^{2^3}=2^8=256$种情况。</p>]]></content>
    
    
    <categories>
      
      <category>OI初赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>初赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模板解析</title>
    <link href="undefined2019/10/02/templates/"/>
    <url>2019/10/02/templates/</url>
    
    <content type="html"><![CDATA[<h1 id="天坑注意"><a href="#天坑注意" class="headerlink" title="天坑注意"></a>天坑注意</h1><h5 id="想说的"><a href="#想说的" class="headerlink" title="想说的"></a>想说的</h5><p>开个文章写写学过的模板。若有不严谨之处烦劳指出。<del>毕竟咱只是个不学无术还超爱颓的萌新…</del></p><a id="more"></a><h3 id="1-快速排序"><a href="#1-快速排序" class="headerlink" title="1. 快速排序"></a>1. 快速排序</h3><p>​ 在最劣$O(n^2)$，平均$O(n\log n)$的时间复杂度与$O(n\log n)$的空间复杂度下对数列进行排序。</p><p>​ 在一串数列中任意选取一个<strong>基准数</strong>，每次扫描将数列中大于基准数的元素置于基准数右侧，小于基准数的置于基准数左侧。然后对基准数两侧区间进行上述相同操作。思想基于分治，考察的是对数组与分治的理解。如图-1.1。</p><p><img src="/img/posts/2/1.gif" alt></p><script type="math/tex;mode=display">\small{\text{图-1.1}}</script><p>​ 可以看出时间复杂度与所选基准数有关。如果每次基准数都选择最左侧的元素，那么，只要整个数列是单调的，就会导致每次扫描都会把剩下的元素全部放在这个基准数的一侧，导致时间复杂度退化为$O(n^2)$。如图-1.2。</p><p><img src="/img/posts/2/2.gif" alt></p><script type="math/tex;mode=display">\small{\text{图-1.2}}</script><p>​ 代码实现有很多种，有从左侧每次扫描到一个元素就和另一侧较大的数交换的，也有两边同时向中间扫的。至于初赛？emmm…</p><p><del>远古</del>早期个人代码:</p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int a[1000001];int n;void qs (int l, int r) {    int i, j, mid;    i=l, j=r;    mid=a[(l+r)&gt;&gt;1];    do {        while (a[i]&lt;mid) i++;        while (a[j]&gt;mid) j--;        if (i&lt;=j) {            swap (a[i], a[j]);            i++, j--;        }    } while (i&lt;=j);    if (l&lt;j) qs (l, j);    if (i&lt;r) qs (i, r);}int main (void) {    scanf (&quot;%d&quot;, &amp;n);    for (int i=1; i&lt;=n; ++i) scanf (&quot;%d&quot;, &amp;a[i]);    qs (1, n);    for (int i=1; i&lt;=n; ++i) printf (&quot;%d &quot;, a[i]);    puts (&quot;&quot;);    return 0 ;}</code></pre>]]></content>
    
    
    <categories>
      
      <category>OI复赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一坨计划</title>
    <link href="undefined2019/09/02/lists/"/>
    <url>2019/09/02/lists/</url>
    
    <content type="html"><![CDATA[<p>一大堆计划，真的要死人的说…</p><a id="more"></a><h4 id="文化"><a href="#文化" class="headerlink" title="文化"></a>文化</h4><h4 id="OI"><a href="#OI" class="headerlink" title="OI"></a>OI</h4>]]></content>
    
    
    
    <tags>
      
      <tag>计划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>想说的</title>
    <link href="undefined2019/08/23/welcome/"/>
    <url>2019/08/23/welcome/</url>
    
    <content type="html"><![CDATA[<p>这是咱花了好久才搭好的博客。</p><a id="more"></a><p>断断续续捣鼓了几个月，<del>搭完发现并没有什么用</del></p><p>虽然不知道您从哪找到的这，不过既然来了不如…不如……不如<code>ctrl+W</code>吧（</p><p><del>话说我这啥都没有啥都不能干啥都做不了，那我为什么要折腾这么久</del></p><p>啊啊啊我又在自娱自乐了</p><p>总而言之，这里啥都没有。<del>所以还是<code>ctrl+W</code></del>吧</p>]]></content>
    
    
    
    <tags>
      
      <tag>文章测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>